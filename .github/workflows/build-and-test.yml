name: Build and Test Lighthouse Bridge

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, develop ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: lighthouse-bridge

jobs:
  # Code quality and security checks
  lint-and-security:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'
          cache: 'pip'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev]"
          
      - name: Run Black formatter check
        run: black --check --diff src/ tests/
        
      - name: Run isort import check
        run: isort --check-only --diff src/ tests/
        
      - name: Run MyPy type checking
        run: mypy src/
        
      - name: Run Bandit security scan
        run: |
          pip install bandit[toml]
          bandit -r src/ -f json -o bandit-report.json
          
      - name: Run Safety dependency scan
        run: |
          pip install safety
          safety check --json --output safety-report.json
        continue-on-error: true
        
      - name: Upload security reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-reports
          path: |
            bandit-report.json
            safety-report.json

  # Unit and integration tests
  test:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    strategy:
      fail-fast: false
      matrix:
        python-version: ['3.11', '3.12']
        
    services:
      redis:
        image: redis:7.2-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
          
      postgres:
        image: postgres:16-alpine
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: lighthouse_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
          
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'
          
      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y fuse3 libfuse3-3 libfuse3-dev
          
      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev]"
          
      - name: Run unit tests
        env:
          REDIS_URL: redis://localhost:6379/0
          POSTGRES_URL: postgresql://postgres:postgres@localhost:5432/lighthouse_test
        run: |
          pytest tests/unit/ \
            --cov=src/lighthouse \
            --cov-report=xml \
            --cov-report=html \
            --junit-xml=junit.xml \
            --timeout=300 \
            -v
            
      - name: Run integration tests
        env:
          REDIS_URL: redis://localhost:6379/0
          POSTGRES_URL: postgresql://postgres:postgres@localhost:5432/lighthouse_test
        run: |
          pytest tests/integration/ \
            --junit-xml=junit-integration.xml \
            --timeout=600 \
            -v
        continue-on-error: true
        
      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results-${{ matrix.python-version }}
          path: |
            junit*.xml
            htmlcov/
            .coverage
            
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        if: matrix.python-version == '3.12'
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella

  # Container build and security scan
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 45
    needs: [lint-and-security, test]
    
    permissions:
      contents: read
      packages: write
      security-events: write
      
    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
      image-uri: ${{ steps.build.outputs.image-uri }}
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Log in to Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ github.repository }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,prefix={{branch}}-,suffix=-{{date 'YYYYMMDD-HHmmss'}},format=short
            
      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/amd64,linux/arm64
          target: production
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            BUILD_DATE=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.created'] }}
            VCS_REF=${{ github.sha }}
            VERSION=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.version'] }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ github.repository }}/${{ env.IMAGE_NAME }}:${{ steps.meta.outputs.version }}
          format: 'sarif'
          output: 'trivy-results.sarif'
          
      - name: Upload Trivy scan results to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'
          
      - name: Run container structure test
        run: |
          # Install container-structure-test
          curl -LO https://storage.googleapis.com/container-structure-test/latest/container-structure-test-linux-amd64
          chmod +x container-structure-test-linux-amd64
          sudo mv container-structure-test-linux-amd64 /usr/local/bin/container-structure-test
          
          # Run structure tests
          container-structure-test test \
            --image ${{ env.REGISTRY }}/${{ github.repository }}/${{ env.IMAGE_NAME }}:${{ steps.meta.outputs.version }} \
            --config tests/container/structure-test.yaml

  # Container integration testing
  integration-test-container:
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: [build]
    if: github.event_name != 'pull_request'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Docker Compose
        run: |
          sudo curl -L "https://github.com/docker/compose/releases/download/v2.21.0/docker-compose-$(uname -s)-$(uname -m)" \
            -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose
          
      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Run integration tests with Docker Compose
        env:
          LIGHTHOUSE_IMAGE: ${{ needs.build.outputs.image-uri }}
        run: |
          # Override image in docker-compose
          export COMPOSE_PROJECT_NAME=lighthouse-ci-${{ github.run_id }}
          
          # Start services
          docker-compose -f docker-compose.ci.yml up -d
          
          # Wait for services to be ready
          timeout 300 bash -c 'until curl -f http://localhost:8765/health; do sleep 5; done'
          
          # Run integration tests
          docker-compose -f docker-compose.ci.yml exec -T lighthouse-bridge \
            python -m pytest tests/integration/container/ -v
            
          # Cleanup
          docker-compose -f docker-compose.ci.yml down -v
          
      - name: Collect container logs
        if: failure()
        run: |
          docker-compose -f docker-compose.ci.yml logs --no-color > container-logs.txt
          
      - name: Upload container logs
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: container-logs
          path: container-logs.txt

  # Performance benchmarks
  benchmark:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    needs: [build]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Run performance benchmarks
        env:
          LIGHTHOUSE_IMAGE: ${{ needs.build.outputs.image-uri }}
        run: |
          # Start benchmark environment
          docker-compose -f docker-compose.benchmark.yml up -d
          
          # Wait for readiness
          timeout 180 bash -c 'until curl -f http://localhost:8765/health; do sleep 5; done'
          
          # Run benchmarks
          docker-compose -f docker-compose.benchmark.yml exec -T lighthouse-bridge \
            python -m pytest tests/performance/ \
            --benchmark-json=benchmark-results.json \
            --benchmark-min-rounds=5
            
          # Cleanup
          docker-compose -f docker-compose.benchmark.yml down -v
          
      - name: Upload benchmark results
        uses: actions/upload-artifact@v4
        with:
          name: benchmark-results
          path: benchmark-results.json
          
      - name: Store benchmark results
        uses: benchmark-action/github-action-benchmark@v1
        with:
          tool: 'pytest'
          output-file-path: benchmark-results.json
          github-token: ${{ secrets.GITHUB_TOKEN }}
          auto-push: true

  # Release deployment
  deploy:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: [build, integration-test-container]
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    environment: production
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Create GitHub release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          body: |
            ## Lighthouse Bridge Release ${{ github.ref }}
            
            ### Container Images
            - `${{ needs.build.outputs.image-uri }}`
            
            ### Changes
            See [CHANGELOG.md](CHANGELOG.md) for details.
            
          draft: false
          prerelease: false